import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

apply plugin: 'java'

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
  }
}

task createDirectories {
  doLast {
    mkdir "build"
    mkdir "dist"
  }
}

configure(createDirectories) {   
  group = 'Intermediate'
  description = 'Create required directories that do not exist in the git repo.'
}

task compilePasswordio(type: JavaCompile) {
  dependsOn 'createDirectories'
  source = fileTree(dir: 'src/passwordio', include: '*.java')
  classpath = files('build')
  destinationDirectory = file('build')
  options.compilerArgs << '-Xlint'
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

configure(compilePasswordio) {
  group = 'Intermediate'
  description = 'Compile passwordio package.'
}

task compileGui(type: JavaCompile) {
  dependsOn 'compilePasswordio'
  source = fileTree(dir: 'src/gui', include: '*.java')
  classpath = files('build')
  destinationDirectory = file('build')
  options.compilerArgs << '-Xlint'
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

configure(compileGui) {
  group = 'Intermediate'
  description = 'Compile gui package.'
}

task jarGui(type: Jar) {
  dependsOn 'compileGui'
  manifest {
    attributes 'Main-Class': 'gui.PasswordProtector'
  }
  archiveBaseName = 'PasswordProtector'
  destinationDirectory = file('dist')
  from fileTree(dir: 'build', include: 'passwordio/*')
  from fileTree(dir: 'build', include: 'gui/*')
  from fileTree(dir: 'resources', include: 'gui/*')
}

configure(jarGui) {
  group = 'Final'
  description = 'Build gui for distribution.'
}

task compileCli(type: JavaCompile) {
  dependsOn 'compilePasswordio'
  source = fileTree(dir: 'src/cli', include: '*.java')
  classpath = files('build')
  destinationDirectory = file('build')
  options.compilerArgs << '-Xlint'
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

configure(compileCli) {
  group = 'Intermediate'
  description = 'Compile cli package.'
}

task jarCli(type: Jar) {
  dependsOn 'compileCli'
  manifest {
    attributes 'Main-Class': 'cli.PasswordProtectorCli'
  }
  archiveBaseName = 'PasswordProtectorCli'
  destinationDirectory = file('dist')
  from fileTree(dir: 'build', include: 'passwordio/*')
  from fileTree(dir: 'build', include: 'cli/*')
  from fileTree(dir: 'resources', include: 'cli/*')
}

configure(jarCli) {
  group = 'Final'
  description = 'Build cli for distribution.'
}

task foo(type: Copy) {
    from fileTree(dir: 'dist', include: "*.jar")
    into "dist/PasswordProtector.app"
}

task bar() {
  //JFrame foo = new JFrame()
  JPanel p = new JPanel() {
    @Override
    public void paintComponent(Graphics g) {
      Graphics2D g2 = (Graphics2D) g


      Shape circle1 = new Ellipse2D.Double(0, 0, 1024, 1024)
      Shape circle2 = new Ellipse2D.Double(50, 50, 924, 924)
      g2.setColor(new Color(128, 0, 0));
      g2.fill(circle1)
      g2.draw(circle1)
      g2.setColor(new Color(0, 128, 128));
      g2.fill(circle2)
      g2.draw(circle2)
    }

    public void saveImage(String name, String type) {
        BufferedImage image = new BufferedImage(getWidth(),getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = image.createGraphics();
        paint(g2);
        try{
            ImageIO.write(image, type, new File(name+"."+type));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
  }
  p.setSize(1024, 1024)
  p.setBackground(new Color(0, 0, 0, 255));
  p.saveImage("foo", "png");
  //foo.add(p)
  //foo.setVisible(true)
}