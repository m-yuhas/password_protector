apply plugin: 'java'

repositories {
  jcenter()
  mavenCentral()
}

configurations {
  toCopy
}

dependencies {
  //classpath group: 'commons-cli', name: 'commons-cli', version: '1.4'
  toCopy 'commons-cli:commons-cli:1.4'
  testCompile 'junit:junit:4.12'
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
  } 
}

task createDirectories {
  doLast {
    mkdir "build"
    mkdir "dist"
    mkdir "lib/passwordio"
  }
}

task downloadDependencies(type: Copy) {
    from configurations.toCopy 
    into 'lib'
}

configure(createDirectories) {   
  group = 'Intermediate'
  description = 'Create required directories that do not exist in the git repo.'
}

task compilePasswordio(type: JavaCompile, dependsOn: createDirectories) {
  source = fileTree(dir: 'src/passwordio', include: '*.java')
  classpath = files('.')
  destinationDirectory = file('build')
  options.compilerArgs << '-Xlint'
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

configure(compilePasswordio) {
  group = 'Intermediate'
  description = 'Compile passwordio package.'
}

task compileGui(type: JavaCompile, dependsOn: compilePasswordio) {
  source = fileTree(dir: 'src/gui', include: '*.java')
  classpath = files('build')
  destinationDirectory = file('build')
  options.compilerArgs << '-Xlint'
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

configure(compileGui) {
  group = 'Intermediate'
  description = 'Compile gui package.'
}

task jarGui(type: Jar, dependsOn: compileGui) {
  manifest {
    attributes 'Main-Class': 'gui.PasswordProtector'
  }
  archiveBaseName = 'PasswordProtector'
  destinationDirectory = file('dist')
  from ('build')
}

configure(jarGui) {
  group = 'Final'
  description = 'Build gui for distribution.'
}

task compileCli(type: JavaCompile, dependsOn: compilePasswordio) {
  source = fileTree(dir: 'src/cli', include: '*.java')
  classpath = files('build')
  destinationDirectory = file('build')
  options.compilerArgs << '-Xlint'
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

configure(compileCli) {
  group = 'Intermediate'
  description = 'Compile cli package.'
}

task jarCli(type: Jar, dependsOn: compileCli) {
  manifest {
    attributes 'Main-Class': 'cli.PasswordProtectorCli'
  }
  archiveBaseName = 'PasswordProtectorCli'
  destinationDirectory = file('dist')
  from ('build')
}

configure(jarCli) {
  group = 'Final'
  description = 'Build cli for distribution.'
}